{"ast":null,"code":"import httpService from './httpService';\nexport const productService = {\n  getProducts,\n  getProductById,\n  deleteProduct,\n  saveProduct,\n  getEmptyProduct\n};\n\nfunction sort(arr) {\n  return arr.sort((a, b) => {\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n      return -1;\n    }\n\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  });\n}\n\nfunction getProducts(filterBy = '') {\n  console.log('gettin products..');\n\n  if (filterBy) {\n    var {\n      name\n    } = filterBy;\n    const query = `?txt=${name}`;\n  }\n\n  return httpService.get(`product/${query}`);\n}\n\nfunction getProductById(_id) {\n  return httpService.get(`product/${_id}`);\n}\n\nfunction deleteProduct(_id) {\n  return httpService.delete(`product/${_id}`);\n}\n\nfunction _updateProduct(product) {\n  return httpService.put(`product/${product._id}`, product);\n}\n\nfunction _addProduct(product) {\n  return httpService.post(`product`, product);\n}\n\nfunction saveProduct(product) {\n  return product._id ? _updateProduct(product) : _addProduct(product);\n}\n\nfunction getEmptyProduct() {\n  return {\n    name: '',\n    email: '',\n    phone: ''\n  };\n} // function filter(term) {\n//   term = term.toLocaleLowerCase()\n//   return products.filter(product => {\n//     return product.name.toLocaleLowerCase().includes(term) ||\n//       product.phone.toLocaleLowerCase().includes(term) ||\n//       product.email.toLocaleLowerCase().includes(term)\n//   })\n// }\n\n\nfunction _makeId(length = 10) {\n  var txt = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return txt;\n}","map":{"version":3,"sources":["C:/Users/tomsh/Desktop/Projects/jipper/frontend/src/services/productService.js"],"names":["httpService","productService","getProducts","getProductById","deleteProduct","saveProduct","getEmptyProduct","sort","arr","a","b","name","toLocaleLowerCase","filterBy","console","log","query","get","_id","delete","_updateProduct","product","put","_addProduct","post","email","phone","_makeId","length","txt","possible","i","charAt","Math","floor","random"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,WAD4B;AAE5BC,EAAAA,cAF4B;AAG5BC,EAAAA,aAH4B;AAI5BC,EAAAA,WAJ4B;AAK5BC,EAAAA;AAL4B,CAAvB;;AAQP,SAASC,IAAT,CAAcC,GAAd,EAAmB;AACjB,SAAOA,GAAG,CAACD,IAAJ,CAAS,CAACE,CAAD,EAAIC,CAAJ,KAAU;AACxB,QAAID,CAAC,CAACE,IAAF,CAAOC,iBAAP,KAA6BF,CAAC,CAACC,IAAF,CAAOC,iBAAP,EAAjC,EAA6D;AAC3D,aAAO,CAAC,CAAR;AACD;;AACD,QAAIH,CAAC,CAACE,IAAF,CAAOC,iBAAP,KAA6BF,CAAC,CAACC,IAAF,CAAOC,iBAAP,EAAjC,EAA6D;AAC3D,aAAO,CAAP;AACD;;AAED,WAAO,CAAP;AACD,GATM,CAAP;AAUD;;AAED,SAASV,WAAT,CAAqBW,QAAQ,GAAG,EAAhC,EAAoC;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AAEA,MAAGF,QAAH,EAAY;AACZ,QAAI;AAACF,MAAAA;AAAD,QAASE,QAAb;AACA,UAAMG,KAAK,GAAI,QAAOL,IAAK,EAA3B;AACD;;AAED,SAAOX,WAAW,CAACiB,GAAZ,CAAiB,WAAUD,KAAM,EAAjC,CAAP;AACC;;AAED,SAASb,cAAT,CAAwBe,GAAxB,EAA6B;AAC3B,SAAOlB,WAAW,CAACiB,GAAZ,CAAiB,WAAUC,GAAI,EAA/B,CAAP;AACD;;AAED,SAASd,aAAT,CAAuBc,GAAvB,EAA4B;AAC3B,SAAOlB,WAAW,CAACmB,MAAZ,CAAoB,WAAUD,GAAI,EAAlC,CAAP;AACA;;AAED,SAASE,cAAT,CAAwBC,OAAxB,EAAiC;AACjC,SAAOrB,WAAW,CAACsB,GAAZ,CAAiB,WAAUD,OAAO,CAACH,GAAI,EAAvC,EAA0CG,OAA1C,CAAP;AACC;;AAED,SAASE,WAAT,CAAqBF,OAArB,EAA8B;AAC9B,SAAOrB,WAAW,CAACwB,IAAZ,CAAkB,SAAlB,EAA4BH,OAA5B,CAAP;AACC;;AAED,SAAShB,WAAT,CAAqBgB,OAArB,EAA8B;AAC5B,SAAOA,OAAO,CAACH,GAAR,GAAcE,cAAc,CAACC,OAAD,CAA5B,GAAwCE,WAAW,CAACF,OAAD,CAA1D;AACD;;AAED,SAASf,eAAT,GAA2B;AACzB,SAAO;AACLK,IAAAA,IAAI,EAAE,EADD;AAELc,IAAAA,KAAK,EAAE,EAFF;AAGLC,IAAAA,KAAK,EAAE;AAHF,GAAP;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,SAASC,OAAT,CAAiBC,MAAM,GAAG,EAA1B,EAA8B;AAC5B,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,QAAQ,GAAG,gEAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BF,IAAAA,GAAG,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACF,MAApC,CAAhB,CAAP;AACD;;AACD,SAAOC,GAAP;AACD","sourcesContent":["import httpService from './httpService';\n\nexport const productService = {\n  getProducts,\n  getProductById,\n  deleteProduct,\n  saveProduct,\n  getEmptyProduct\n}\n\nfunction sort(arr) {\n  return arr.sort((a, b) => {\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n      return -1;\n    }\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  })\n}\n\nfunction getProducts(filterBy = '') {\n  console.log('gettin products..');\n\n  if(filterBy){\n  var {name} = filterBy;\n  const query = `?txt=${name}`;\n}\n\nreturn httpService.get(`product/${query}`);\n}\n\nfunction getProductById(_id) {\n  return httpService.get(`product/${_id}`)\n}\n\nfunction deleteProduct(_id) {\n return httpService.delete(`product/${_id}`)\n}\n\nfunction _updateProduct(product) {\nreturn httpService.put(`product/${product._id}`, product)\n}\n\nfunction _addProduct(product) {\nreturn httpService.post(`product`, product)\n}\n\nfunction saveProduct(product) {\n  return product._id ? _updateProduct(product) : _addProduct(product)\n}\n\nfunction getEmptyProduct() {\n  return {\n    name: '',\n    email: '',\n    phone: ''\n  }\n}\n\n// function filter(term) {\n//   term = term.toLocaleLowerCase()\n//   return products.filter(product => {\n//     return product.name.toLocaleLowerCase().includes(term) ||\n//       product.phone.toLocaleLowerCase().includes(term) ||\n//       product.email.toLocaleLowerCase().includes(term)\n//   })\n// }\n\n\n\nfunction _makeId(length = 10) {\n  var txt = ''\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\n  }\n  return txt\n}"]},"metadata":{},"sourceType":"module"}