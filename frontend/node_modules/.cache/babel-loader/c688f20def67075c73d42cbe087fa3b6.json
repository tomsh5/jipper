{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsh\\\\Desktop\\\\Projects\\\\jipper\\\\frontend\\\\src\\\\pages\\\\ShopingCart\\\\ShopingCart.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { orderService } from \"../../services/orderService\";\nimport { loadOrder } from '../../actions/OrderActions';\nimport { ProductList } from '../../cmps/ProductList/ProductList.jsx';\nimport './ShopingCart.scss';\n\nclass _ShopingCart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: []\n    };\n\n    this.calcPrice = () => {\n      /* this is our initial value i.e. the starting point*/\n      const initialValue = 0;\n      /* numbers array */\n\n      const numbers = [5, 10, 15];\n      /* reducer method that takes in the accumulator and next item */\n\n      const reducer = (accumulator, item) => {\n        return accumulator + item;\n      };\n      /* we give the reduce method our reducer function\r\n        and our initial value */\n\n\n      const total = numbers.reduce(reducer, initialValue);\n      console.log(total);\n    };\n  }\n\n  async componentDidMount() {\n    // this.props.loadOrder()\n    // console.log(this.props);\n    const products = await orderService.getOrder();\n    await console.log(products);\n    this.setState({\n      products\n    });\n    calcPrice();\n  } //  async loadOrder() {\n  //     const order = await orderService.getOrder()\n  //     this.setState({ order })\n  // }\n\n\n  render() {\n    const {\n      products\n    } = this.state;\n    if (!products) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 31\n      }\n    }, \"Loading....\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      products: products,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // gets the global state and puts it in the props of the component\n\n\nfunction mapStateProps(state) {\n  return {\n    order: state.OrderReducer.order\n  };\n} // Takes the action dispatchers from the actions file and puts them inside the component's props\n\n\nconst mapDispatchToProps = {\n  loadOrder\n}; // Connect is used to tap into the store, without it we have no access to the store from the component\n\nexport const ShopingCart = connect(mapStateProps, mapDispatchToProps)(_ShopingCart);","map":{"version":3,"sources":["C:/Users/tomsh/Desktop/Projects/jipper/frontend/src/pages/ShopingCart/ShopingCart.jsx"],"names":["React","Component","connect","orderService","loadOrder","ProductList","_ShopingCart","state","products","calcPrice","initialValue","numbers","reducer","accumulator","item","total","reduce","console","log","componentDidMount","getOrder","setState","render","mapStateProps","order","OrderReducer","mapDispatchToProps","ShopingCart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,OAAO,oBAAP;;AAGA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjCM,KAFiC,GAEzB;AACJC,MAAAA,QAAQ,EAAE;AADN,KAFyB;;AAAA,SAoBjCC,SApBiC,GAoBrB,MAAM;AACd;AACA,YAAMC,YAAY,GAAG,CAArB;AAEA;;AACA,YAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAhB;AAEA;;AACA,YAAMC,OAAO,GAAG,CAACC,WAAD,EAAcC,IAAd,KAAuB;AACnC,eAAOD,WAAW,GAAGC,IAArB;AACH,OAFD;AAIA;;;;AAEA,YAAMC,KAAK,GAAGJ,OAAO,CAACK,MAAR,CAAeJ,OAAf,EAAwBF,YAAxB,CAAd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEH,KArCgC;AAAA;;AAMjC,QAAMI,iBAAN,GAA0B;AACtB;AACA;AACA,UAAMX,QAAQ,GAAG,MAAML,YAAY,CAACiB,QAAb,EAAvB;AACA,UAAMH,OAAO,CAACC,GAAR,CAAYV,QAAZ,CAAN;AACA,SAAKa,QAAL,CAAc;AAAEb,MAAAA;AAAF,KAAd;AACAC,IAAAA,SAAS;AACZ,GAbgC,CAejC;AACA;AACA;AACA;;;AAsBAa,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEd,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,QAAI,CAACC,QAAL,EAAe,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AAEf,wBACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAEA,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAOH;;AApDgC,C,CAsDrC;;;AACA,SAASe,aAAT,CAAuBhB,KAAvB,EAA8B;AAC1B,SAAO;AACHiB,IAAAA,KAAK,EAAEjB,KAAK,CAACkB,YAAN,CAAmBD;AADvB,GAAP;AAIH,C,CACD;;;AACA,MAAME,kBAAkB,GAAG;AACvBtB,EAAAA;AADuB,CAA3B,C,CAGA;;AACA,OAAO,MAAMuB,WAAW,GAAGzB,OAAO,CAACqB,aAAD,EAAgBG,kBAAhB,CAAP,CAA2CpB,YAA3C,CAApB","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { orderService } from \"../../services/orderService\"\r\nimport { loadOrder } from '../../actions/OrderActions'\r\nimport { ProductList } from '../../cmps/ProductList/ProductList.jsx'\r\nimport './ShopingCart.scss'\r\n\r\n\r\nclass _ShopingCart extends Component {\r\n\r\n    state = {\r\n        products: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // this.props.loadOrder()\r\n        // console.log(this.props);\r\n        const products = await orderService.getOrder()\r\n        await console.log(products);\r\n        this.setState({ products })\r\n        calcPrice()\r\n    }\r\n\r\n    //  async loadOrder() {\r\n    //     const order = await orderService.getOrder()\r\n    //     this.setState({ order })\r\n    // }\r\n\r\n    calcPrice = () => {\r\n        /* this is our initial value i.e. the starting point*/\r\n        const initialValue = 0;\r\n\r\n        /* numbers array */\r\n        const numbers = [5, 10, 15];\r\n\r\n        /* reducer method that takes in the accumulator and next item */\r\n        const reducer = (accumulator, item) => {\r\n            return accumulator + item;\r\n        };\r\n\r\n        /* we give the reduce method our reducer function\r\n          and our initial value */\r\n        const total = numbers.reduce(reducer, initialValue)\r\n        console.log(total);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { products } = this.state\r\n        if (!products) return <div>Loading....</div>\r\n\r\n        return (\r\n            <div className=\"main-layout\">\r\n                <ProductList products={products} />\r\n                {/* {order[0].name} */}\r\n                {/* {products} */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// gets the global state and puts it in the props of the component\r\nfunction mapStateProps(state) {\r\n    return {\r\n        order: state.OrderReducer.order\r\n    }\r\n\r\n}\r\n// Takes the action dispatchers from the actions file and puts them inside the component's props\r\nconst mapDispatchToProps = {\r\n    loadOrder\r\n}\r\n// Connect is used to tap into the store, without it we have no access to the store from the component\r\nexport const ShopingCart = connect(mapStateProps, mapDispatchToProps)(_ShopingCart)"]},"metadata":{},"sourceType":"module"}