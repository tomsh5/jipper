{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsh\\\\Desktop\\\\Projects\\\\jipper\\\\frontend\\\\src\\\\pages\\\\ShopingCart\\\\ShopingCart.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { orderService } from \"../../services/orderService\";\nimport { loadOrder } from '../../actions/OrderActions';\nimport { ProductList } from '../../cmps/ProductList/ProductList.jsx';\nimport './ShopingCart.scss';\n\nclass _ShopingCart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: []\n    };\n\n    this.calcPrice = () => {\n      const {\n        products\n      } = this.state;\n      /* this is our initial value i.e. the starting point*/\n\n      const acc = 0;\n      /* numbers array */\n\n      const prices = products.map(product => product.price);\n      console.log(prices);\n      /* reducer method that takes in the accumulator and next item */\n\n      const reducer = (accumulator, item) => {\n        return accumulator + item;\n      };\n      /* we give the reduce method our reducer function\r\n        and our initial value */\n\n\n      const total = prices.reduce(reducer, acc);\n      console.log(total);\n      return total;\n    };\n  }\n\n  async componentDidMount() {\n    // this.props.loadOrder()\n    // console.log(this.props);\n    const products = await orderService.getOrder();\n    await console.log(products);\n    this.setState({\n      products\n    });\n    this.calcPrice();\n  } //  async loadOrder() {\n  //     const order = await orderService.getOrder()\n  //     this.setState({ order })\n  // }\n\n\n  render() {\n    const deliveryPrice = 30;\n    const total = this.calcPrice();\n    const {\n      products\n    } = this.state;\n    if (!products) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 31\n      }\n    }, \"Loading....\");\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"shopingCart main-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cart-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"products-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, \"My Bag\"), /*#__PURE__*/React.createElement(ProductList, {\n      listMode: \"cartMode\",\n      products: products,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"total-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, \"Sub-total\"), total, \" NIS\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, \"Delivery\"), deliveryPrice, \" NIS\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"Total\"), total + deliveryPrice, \" NIS\")), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Checkout\"))));\n  }\n\n} // gets the global state and puts it in the props of the component\n\n\nfunction mapStateProps(state) {\n  return {\n    order: state.OrderReducer.order\n  };\n} // Takes the action dispatchers from the actions file and puts them inside the component's props\n\n\nconst mapDispatchToProps = {\n  loadOrder\n}; // Connect is used to tap into the store, without it we have no access to the store from the component\n\nexport const ShopingCart = connect(mapStateProps, mapDispatchToProps)(_ShopingCart);","map":{"version":3,"sources":["C:/Users/tomsh/Desktop/Projects/jipper/frontend/src/pages/ShopingCart/ShopingCart.jsx"],"names":["React","Component","connect","orderService","loadOrder","ProductList","_ShopingCart","state","products","calcPrice","acc","prices","map","product","price","console","log","reducer","accumulator","item","total","reduce","componentDidMount","getOrder","setState","render","deliveryPrice","mapStateProps","order","OrderReducer","mapDispatchToProps","ShopingCart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { orderService } from \"../../services/orderService\"\r\nimport { loadOrder } from '../../actions/OrderActions'\r\nimport { ProductList } from '../../cmps/ProductList/ProductList.jsx'\r\nimport './ShopingCart.scss'\r\n\r\n\r\nclass _ShopingCart extends Component {\r\n\r\n    state = {\r\n        products: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // this.props.loadOrder()\r\n        // console.log(this.props);\r\n        const products = await orderService.getOrder()\r\n        await console.log(products);\r\n        this.setState({ products })\r\n        this.calcPrice()\r\n    }\r\n\r\n    //  async loadOrder() {\r\n    //     const order = await orderService.getOrder()\r\n    //     this.setState({ order })\r\n    // }\r\n\r\n    calcPrice = () => {\r\n        const { products } = this.state\r\n        /* this is our initial value i.e. the starting point*/\r\n        const acc = 0;\r\n\r\n        /* numbers array */\r\n        const prices = products.map(product => product.price)\r\n        console.log(prices);\r\n\r\n        /* reducer method that takes in the accumulator and next item */\r\n        const reducer = (accumulator, item) => {\r\n            return accumulator + item;\r\n        };\r\n\r\n        /* we give the reduce method our reducer function\r\n          and our initial value */\r\n        const total = prices.reduce(reducer, acc)\r\n        console.log(total);\r\n        return total\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const deliveryPrice = 30;\r\n        const total = this.calcPrice()\r\n        const { products } = this.state\r\n        if (!products) return <div>Loading....</div>\r\n\r\n        return (\r\n            <section className=\"shopingCart main-layout\">\r\n                <div className=\"cart-container\">\r\n                    <div className=\"products-container\">\r\n                        <h2>My Bag</h2>\r\n                <ProductList listMode=\"cartMode\" products={products} />\r\n                    </div>\r\n                    <div className=\"total-container\">\r\n                    <h2>Total</h2>\r\n                    <ul>\r\n                    <li><span>Sub-total</span>\r\n                    {total} NIS\r\n                    </li>\r\n                    <li>\r\n                    <span>Delivery</span>\r\n                    {deliveryPrice} NIS\r\n                    </li>\r\n                    <li>\r\n                    <span>Total</span>\r\n                    {total+deliveryPrice} NIS\r\n                    </li>\r\n                    </ul>\r\n                    <button>Checkout</button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n// gets the global state and puts it in the props of the component\r\nfunction mapStateProps(state) {\r\n    return {\r\n        order: state.OrderReducer.order\r\n    }\r\n\r\n}\r\n// Takes the action dispatchers from the actions file and puts them inside the component's props\r\nconst mapDispatchToProps = {\r\n    loadOrder\r\n}\r\n// Connect is used to tap into the store, without it we have no access to the store from the component\r\nexport const ShopingCart = connect(mapStateProps, mapDispatchToProps)(_ShopingCart)"]},"metadata":{},"sourceType":"module"}