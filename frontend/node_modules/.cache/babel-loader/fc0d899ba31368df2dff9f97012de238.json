{"ast":null,"code":"export const contactService = {\n  getContacts,\n  getContactById,\n  deleteContact,\n  saveContact,\n  getEmptyContact\n};\nconst contacts = [{\n  \"_id\": \"5a56640269f443a5d64b32ca\",\n  \"name\": \"Ochoa Hyde\",\n  \"email\": \"ochoahyde@renovize.com\",\n  \"phone\": \"+1 (968) 593-3824\"\n}, {\n  \"_id\": \"5a5664025f6ae9aa24a99fde\",\n  \"name\": \"Hallie Mclean\",\n  \"email\": \"halliemclean@renovize.com\",\n  \"phone\": \"+1 (948) 464-2888\"\n}, {\n  \"_id\": \"5a56640252d6acddd183d319\",\n  \"name\": \"Parsons Norris\",\n  \"email\": \"parsonsnorris@renovize.com\",\n  \"phone\": \"+1 (958) 502-3495\"\n}, {\n  \"_id\": \"5a566402ed1cf349f0b47b4d\",\n  \"name\": \"Rachel Lowe\",\n  \"email\": \"rachellowe@renovize.com\",\n  \"phone\": \"+1 (911) 475-2312\"\n}, {\n  \"_id\": \"5a566402abce24c6bfe4699d\",\n  \"name\": \"Dominique Soto\",\n  \"email\": \"dominiquesoto@renovize.com\",\n  \"phone\": \"+1 (807) 551-3258\"\n}, {\n  \"_id\": \"5a566402a6499c1d4da9220a\",\n  \"name\": \"Shana Pope\",\n  \"email\": \"shanapope@renovize.com\",\n  \"phone\": \"+1 (970) 527-3082\"\n}, {\n  \"_id\": \"5a566402f90ae30e97f990db\",\n  \"name\": \"Faulkner Flores\",\n  \"email\": \"faulknerflores@renovize.com\",\n  \"phone\": \"+1 (952) 501-2678\"\n}, {\n  \"_id\": \"5a5664027bae84ef280ffbdf\",\n  \"name\": \"Holder Bean\",\n  \"email\": \"holderbean@renovize.com\",\n  \"phone\": \"+1 (989) 503-2663\"\n}, {\n  \"_id\": \"5a566402e3b846c5f6aec652\",\n  \"name\": \"Rosanne Shelton\",\n  \"email\": \"rosanneshelton@renovize.com\",\n  \"phone\": \"+1 (968) 454-3851\"\n}, {\n  \"_id\": \"5a56640272c7dcdf59c3d411\",\n  \"name\": \"Pamela Nolan\",\n  \"email\": \"pamelanolan@renovize.com\",\n  \"phone\": \"+1 (986) 545-2166\"\n}, {\n  \"_id\": \"5a5664029a8dd82a6178b15f\",\n  \"name\": \"Roy Cantu\",\n  \"email\": \"roycantu@renovize.com\",\n  \"phone\": \"+1 (929) 571-2295\"\n}, {\n  \"_id\": \"5a5664028c096d08eeb13a8a\",\n  \"name\": \"Ollie Christian\",\n  \"email\": \"olliechristian@renovize.com\",\n  \"phone\": \"+1 (977) 419-3550\"\n}, {\n  \"_id\": \"5a5664026c53582bb9ebe9d1\",\n  \"name\": \"Nguyen Walls\",\n  \"email\": \"nguyenwalls@renovize.com\",\n  \"phone\": \"+1 (963) 471-3181\"\n}, {\n  \"_id\": \"5a56640298ab77236845b82b\",\n  \"name\": \"Glenna Santana\",\n  \"email\": \"glennasantana@renovize.com\",\n  \"phone\": \"+1 (860) 467-2376\"\n}, {\n  \"_id\": \"5a56640208fba3e8ecb97305\",\n  \"name\": \"Malone Clark\",\n  \"email\": \"maloneclark@renovize.com\",\n  \"phone\": \"+1 (818) 565-2557\"\n}, {\n  \"_id\": \"5a566402abb3146207bc4ec5\",\n  \"name\": \"Floyd Rutledge\",\n  \"email\": \"floydrutledge@renovize.com\",\n  \"phone\": \"+1 (807) 597-3629\"\n}, {\n  \"_id\": \"5a56640298500fead8cb1ee5\",\n  \"name\": \"Grace James\",\n  \"email\": \"gracejames@renovize.com\",\n  \"phone\": \"+1 (959) 525-2529\"\n}, {\n  \"_id\": \"5a56640243427b8f8445231e\",\n  \"name\": \"Tanner Gates\",\n  \"email\": \"tannergates@renovize.com\",\n  \"phone\": \"+1 (978) 591-2291\"\n}, {\n  \"_id\": \"5a5664025c3abdad6f5e098c\",\n  \"name\": \"Lilly Conner\",\n  \"email\": \"lillyconner@renovize.com\",\n  \"phone\": \"+1 (842) 587-3812\"\n}];\n\nfunction sort(arr) {\n  return arr.sort((a, b) => {\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n      return -1;\n    }\n\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  });\n}\n\nfunction getContacts(filterBy = null) {\n  console.log('gettin contacts..');\n  return new Promise((resolve, reject) => {\n    let contactsToReturn = contacts;\n\n    if (filterBy) {\n      var {\n        name\n      } = filterBy;\n      contactsToReturn = contacts.filter(contact => contact.name.toLowerCase().includes(name.toLowerCase()));\n    }\n\n    resolve([...contactsToReturn]);\n  });\n}\n\nfunction getContactById(id) {\n  return new Promise((resolve, reject) => {\n    const contact = contacts.find(contact => contact._id === id);\n    contact ? resolve(contact) : reject(`Contact id ${id} not found!`);\n  });\n}\n\nfunction deleteContact(id) {\n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(contact => contact._id === id);\n\n    if (index !== -1) {\n      contacts.splice(index, 1);\n    }\n\n    resolve(contacts);\n  });\n}\n\nfunction _updateContact(contact) {\n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(c => contact._id === c._id);\n\n    if (index !== -1) {\n      contacts[index] = contact;\n    }\n\n    resolve(contact);\n  });\n}\n\nfunction _addContact(contact) {\n  return new Promise((resolve, reject) => {\n    contact._id = _makeId();\n    contacts.push(contact);\n    resolve(contact);\n  });\n}\n\nfunction saveContact(contact) {\n  return contact._id ? _updateContact(contact) : _addContact(contact);\n}\n\nfunction getEmptyContact() {\n  return {\n    name: '',\n    email: '',\n    phone: ''\n  };\n}\n\nfunction filter(term) {\n  term = term.toLocaleLowerCase();\n  return contacts.filter(contact => {\n    return contact.name.toLocaleLowerCase().includes(term) || contact.phone.toLocaleLowerCase().includes(term) || contact.email.toLocaleLowerCase().includes(term);\n  });\n}\n\nfunction _makeId(length = 10) {\n  var txt = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return txt;\n}","map":{"version":3,"sources":["C:/Users/tomsh/Desktop/Projects/jipper/frontend/src/services/contactService.js"],"names":["contactService","getContacts","getContactById","deleteContact","saveContact","getEmptyContact","contacts","sort","arr","a","b","name","toLocaleLowerCase","filterBy","console","log","Promise","resolve","reject","contactsToReturn","filter","contact","toLowerCase","includes","id","find","_id","index","findIndex","splice","_updateContact","c","_addContact","_makeId","push","email","phone","term","length","txt","possible","i","charAt","Math","floor","random"],"mappings":"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","sourcesContent":["export const contactService = {\n  getContacts,\n  getContactById,\n  deleteContact,\n  saveContact,\n  getEmptyContact\n}\n\nconst contacts = [\n  {\n    \"_id\": \"5a56640269f443a5d64b32ca\",\n    \"name\": \"Ochoa Hyde\",\n    \"email\": \"ochoahyde@renovize.com\",\n    \"phone\": \"+1 (968) 593-3824\"\n  },\n  {\n    \"_id\": \"5a5664025f6ae9aa24a99fde\",\n    \"name\": \"Hallie Mclean\",\n    \"email\": \"halliemclean@renovize.com\",\n    \"phone\": \"+1 (948) 464-2888\"\n  },\n  {\n    \"_id\": \"5a56640252d6acddd183d319\",\n    \"name\": \"Parsons Norris\",\n    \"email\": \"parsonsnorris@renovize.com\",\n    \"phone\": \"+1 (958) 502-3495\"\n  },\n  {\n    \"_id\": \"5a566402ed1cf349f0b47b4d\",\n    \"name\": \"Rachel Lowe\",\n    \"email\": \"rachellowe@renovize.com\",\n    \"phone\": \"+1 (911) 475-2312\"\n  },\n  {\n    \"_id\": \"5a566402abce24c6bfe4699d\",\n    \"name\": \"Dominique Soto\",\n    \"email\": \"dominiquesoto@renovize.com\",\n    \"phone\": \"+1 (807) 551-3258\"\n  },\n  {\n    \"_id\": \"5a566402a6499c1d4da9220a\",\n    \"name\": \"Shana Pope\",\n    \"email\": \"shanapope@renovize.com\",\n    \"phone\": \"+1 (970) 527-3082\"\n  },\n  {\n    \"_id\": \"5a566402f90ae30e97f990db\",\n    \"name\": \"Faulkner Flores\",\n    \"email\": \"faulknerflores@renovize.com\",\n    \"phone\": \"+1 (952) 501-2678\"\n  },\n  {\n    \"_id\": \"5a5664027bae84ef280ffbdf\",\n    \"name\": \"Holder Bean\",\n    \"email\": \"holderbean@renovize.com\",\n    \"phone\": \"+1 (989) 503-2663\"\n  },\n  {\n    \"_id\": \"5a566402e3b846c5f6aec652\",\n    \"name\": \"Rosanne Shelton\",\n    \"email\": \"rosanneshelton@renovize.com\",\n    \"phone\": \"+1 (968) 454-3851\"\n  },\n  {\n    \"_id\": \"5a56640272c7dcdf59c3d411\",\n    \"name\": \"Pamela Nolan\",\n    \"email\": \"pamelanolan@renovize.com\",\n    \"phone\": \"+1 (986) 545-2166\"\n  },\n  {\n    \"_id\": \"5a5664029a8dd82a6178b15f\",\n    \"name\": \"Roy Cantu\",\n    \"email\": \"roycantu@renovize.com\",\n    \"phone\": \"+1 (929) 571-2295\"\n  },\n  {\n    \"_id\": \"5a5664028c096d08eeb13a8a\",\n    \"name\": \"Ollie Christian\",\n    \"email\": \"olliechristian@renovize.com\",\n    \"phone\": \"+1 (977) 419-3550\"\n  },\n  {\n    \"_id\": \"5a5664026c53582bb9ebe9d1\",\n    \"name\": \"Nguyen Walls\",\n    \"email\": \"nguyenwalls@renovize.com\",\n    \"phone\": \"+1 (963) 471-3181\"\n  },\n  {\n    \"_id\": \"5a56640298ab77236845b82b\",\n\n    \"name\": \"Glenna Santana\",\n    \"email\": \"glennasantana@renovize.com\",\n    \"phone\": \"+1 (860) 467-2376\"\n  },\n  {\n    \"_id\": \"5a56640208fba3e8ecb97305\",\n    \"name\": \"Malone Clark\",\n    \"email\": \"maloneclark@renovize.com\",\n    \"phone\": \"+1 (818) 565-2557\"\n  },\n  {\n    \"_id\": \"5a566402abb3146207bc4ec5\",\n    \"name\": \"Floyd Rutledge\",\n    \"email\": \"floydrutledge@renovize.com\",\n    \"phone\": \"+1 (807) 597-3629\"\n  },\n  {\n    \"_id\": \"5a56640298500fead8cb1ee5\",\n    \"name\": \"Grace James\",\n    \"email\": \"gracejames@renovize.com\",\n    \"phone\": \"+1 (959) 525-2529\"\n  },\n  {\n    \"_id\": \"5a56640243427b8f8445231e\",\n    \"name\": \"Tanner Gates\",\n    \"email\": \"tannergates@renovize.com\",\n    \"phone\": \"+1 (978) 591-2291\"\n  },\n  {\n    \"_id\": \"5a5664025c3abdad6f5e098c\",\n    \"name\": \"Lilly Conner\",\n    \"email\": \"lillyconner@renovize.com\",\n    \"phone\": \"+1 (842) 587-3812\"\n  }\n];\n\nfunction sort(arr) {\n  return arr.sort((a, b) => {\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n      return -1;\n    }\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  })\n}\n\nfunction getContacts(filterBy = null) {\n  console.log('gettin contacts..');\n  return new Promise((resolve, reject) => {\n    let contactsToReturn = contacts;\n    if (filterBy) {\n      var { name } = filterBy\n      contactsToReturn = contacts.filter(contact => contact.name.toLowerCase().includes(name.toLowerCase())\n      )\n    }\n    resolve([...contactsToReturn])\n  })\n}\n\nfunction getContactById(id) {\n  return new Promise((resolve, reject) => {\n    const contact = contacts.find(contact => contact._id === id)\n    contact ? resolve(contact) : reject(`Contact id ${id} not found!`)\n  })\n}\n\nfunction deleteContact(id) {\n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(contact => contact._id === id)\n    if (index !== -1) {\n      contacts.splice(index, 1)\n    }\n\n    resolve(contacts)\n  })\n}\n\nfunction _updateContact(contact) {\n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(c => contact._id === c._id)\n    if (index !== -1) {\n      contacts[index] = contact\n    }\n    resolve(contact)\n  })\n}\n\nfunction _addContact(contact) {\n  return new Promise((resolve, reject) => {\n    contact._id = _makeId()\n    contacts.push(contact)\n    resolve(contact)\n  })\n}\n\nfunction saveContact(contact) {\n  return contact._id ? _updateContact(contact) : _addContact(contact)\n}\n\nfunction getEmptyContact() {\n  return {\n    name: '',\n    email: '',\n    phone: ''\n  }\n}\n\nfunction filter(term) {\n  term = term.toLocaleLowerCase()\n  return contacts.filter(contact => {\n    return contact.name.toLocaleLowerCase().includes(term) ||\n      contact.phone.toLocaleLowerCase().includes(term) ||\n      contact.email.toLocaleLowerCase().includes(term)\n  })\n}\n\n\n\nfunction _makeId(length = 10) {\n  var txt = ''\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\n  }\n  return txt\n}"]},"metadata":{},"sourceType":"module"}