{"ast":null,"code":"export default {\n  query,\n  get,\n  post,\n  put,\n  remove,\n  postMany,\n  clearStorage\n};\n\nfunction query(entityType) {\n  var entities = JSON.parse(localStorage.getItem(entityType)) || [];\n  return Promise.resolve(entities);\n}\n\nfunction get(entityType, entityId) {\n  return query(entityType).then(entities => entities.find(entity => entity._id === entityId));\n}\n\nfunction post(entityType, newEntity) {\n  // newEntity._id = _makeId() //// turned off because it changes the item id(roy)    \n  return query(entityType).then(entities => {\n    entities.push(newEntity);\n\n    _save(entityType, entities);\n\n    return newEntity;\n  });\n}\n\nfunction postMany(entityType, newEntities) {\n  return query(entityType).then(entities => {\n    entities.push(...newEntities);\n\n    _save(entityType, entities);\n\n    return entities;\n  });\n}\n\nfunction put(entityType, updatedEntity) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\n    entities.splice(idx, 1, updatedEntity);\n\n    _save(entityType, entities);\n\n    return updatedEntity;\n  });\n}\n\nfunction remove(entityType, entityId) {\n  return query(entityType).then(entities => {\n    const idx = entities.findIndex(entity => entity._id === entityId);\n    entities.splice(idx, 1);\n\n    _save(entityType, entities);\n  });\n}\n\nfunction _save(entityType, entities) {\n  localStorage.setItem(entityType, JSON.stringify(entities));\n}\n\nfunction clearStorage(entity) {\n  localStorage.removeItem(entity);\n} // function _makeId(length = 5) {\n//     var text = \"\";\n//     var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n//     for (var i = 0; i < length; i++) {\n//         text += possible.charAt(Math.floor(Math.random() * possible.length));\n//     }\n//     return text;\n// }","map":{"version":3,"sources":["C:/Users/tomsh/Desktop/Projects/jipper/frontend/src/services/storageService.js"],"names":["query","get","post","put","remove","postMany","clearStorage","entityType","entities","JSON","parse","localStorage","getItem","Promise","resolve","entityId","then","find","entity","_id","newEntity","push","_save","newEntities","updatedEntity","idx","findIndex","splice","setItem","stringify","removeItem"],"mappings":"AAEA,eAAe;AACXA,EAAAA,KADW;AAEXC,EAAAA,GAFW;AAGXC,EAAAA,IAHW;AAIXC,EAAAA,GAJW;AAKXC,EAAAA,MALW;AAMXC,EAAAA,QANW;AAOXC,EAAAA;AAPW,CAAf;;AAUA,SAASN,KAAT,CAAeO,UAAf,EAA2B;AACvB,MAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBL,UAArB,CAAX,KAAgD,EAA/D;AACA,SAAOM,OAAO,CAACC,OAAR,CAAgBN,QAAhB,CAAP;AACH;;AAGD,SAASP,GAAT,CAAaM,UAAb,EAAyBQ,QAAzB,EAAmC;AAC/B,SAAOf,KAAK,CAACO,UAAD,CAAL,CACFS,IADE,CACGR,QAAQ,IAAIA,QAAQ,CAACS,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeJ,QAAvC,CADf,CAAP;AAEH;;AACD,SAASb,IAAT,CAAcK,UAAd,EAA0Ba,SAA1B,EAAqC;AAEjC;AACA,SAAOpB,KAAK,CAACO,UAAD,CAAL,CACFS,IADE,CACGR,QAAQ,IAAI;AACdA,IAAAA,QAAQ,CAACa,IAAT,CAAcD,SAAd;;AACAE,IAAAA,KAAK,CAACf,UAAD,EAAaC,QAAb,CAAL;;AACA,WAAOY,SAAP;AACH,GALE,CAAP;AAMH;;AAED,SAASf,QAAT,CAAkBE,UAAlB,EAA8BgB,WAA9B,EAA2C;AACvC,SAAOvB,KAAK,CAACO,UAAD,CAAL,CACFS,IADE,CACGR,QAAQ,IAAI;AACdA,IAAAA,QAAQ,CAACa,IAAT,CAAc,GAAGE,WAAjB;;AACAD,IAAAA,KAAK,CAACf,UAAD,EAAaC,QAAb,CAAL;;AACA,WAAOA,QAAP;AACH,GALE,CAAP;AAMH;;AAED,SAASL,GAAT,CAAaI,UAAb,EAAyBiB,aAAzB,EAAwC;AACpC,SAAOxB,KAAK,CAACO,UAAD,CAAL,CACFS,IADE,CACGR,QAAQ,IAAI;AACd,UAAMiB,GAAG,GAAGjB,QAAQ,CAACkB,SAAT,CAAmBR,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeK,aAAa,CAACL,GAA1D,CAAZ;AACAX,IAAAA,QAAQ,CAACmB,MAAT,CAAgBF,GAAhB,EAAqB,CAArB,EAAwBD,aAAxB;;AACAF,IAAAA,KAAK,CAACf,UAAD,EAAaC,QAAb,CAAL;;AACA,WAAOgB,aAAP;AACH,GANE,CAAP;AAOH;;AAED,SAASpB,MAAT,CAAgBG,UAAhB,EAA4BQ,QAA5B,EAAsC;AAClC,SAAOf,KAAK,CAACO,UAAD,CAAL,CACFS,IADE,CACGR,QAAQ,IAAI;AACd,UAAMiB,GAAG,GAAGjB,QAAQ,CAACkB,SAAT,CAAmBR,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeJ,QAA5C,CAAZ;AAEAP,IAAAA,QAAQ,CAACmB,MAAT,CAAgBF,GAAhB,EAAqB,CAArB;;AACAH,IAAAA,KAAK,CAACf,UAAD,EAAaC,QAAb,CAAL;AACH,GANE,CAAP;AAOH;;AAED,SAASc,KAAT,CAAef,UAAf,EAA2BC,QAA3B,EAAqC;AACjCG,EAAAA,YAAY,CAACiB,OAAb,CAAqBrB,UAArB,EAAiCE,IAAI,CAACoB,SAAL,CAAerB,QAAf,CAAjC;AACH;;AAGD,SAASF,YAAT,CAAsBY,MAAtB,EAA6B;AACzBP,EAAAA,YAAY,CAACmB,UAAb,CAAwBZ,MAAxB;AAEH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n\nexport default {\n    query,\n    get,\n    post,\n    put,\n    remove,\n    postMany,\n    clearStorage\n}\n\nfunction query(entityType) {\n    var entities = JSON.parse(localStorage.getItem(entityType)) || []\n    return Promise.resolve(entities);\n}\n\n\nfunction get(entityType, entityId) {\n    return query(entityType)\n        .then(entities => entities.find(entity => entity._id === entityId))\n}\nfunction post(entityType, newEntity) {\n      \n    // newEntity._id = _makeId() //// turned off because it changes the item id(roy)    \n    return query(entityType)\n        .then(entities => {\n            entities.push(newEntity);\n            _save(entityType, entities)\n            return newEntity;\n        })\n}\n\nfunction postMany(entityType, newEntities) {\n    return query(entityType)\n        .then(entities => {\n            entities.push(...newEntities);\n            _save(entityType, entities)\n            return entities;\n        })\n}\n\nfunction put(entityType, updatedEntity) {\n    return query(entityType)\n        .then(entities => {\n            const idx = entities.findIndex(entity => entity._id === updatedEntity._id);\n            entities.splice(idx, 1, updatedEntity)\n            _save(entityType, entities)\n            return updatedEntity;\n        })\n}\n\nfunction remove(entityType, entityId) {\n    return query(entityType)\n        .then(entities => {\n            const idx = entities.findIndex(entity => entity._id === entityId);\n         \n            entities.splice(idx, 1)\n            _save(entityType, entities)\n        })\n}\n\nfunction _save(entityType, entities) {\n    localStorage.setItem(entityType, JSON.stringify(entities))\n}\n\n\nfunction clearStorage(entity){\n    localStorage.removeItem(entity);\n\n}\n\n// function _makeId(length = 5) {\n//     var text = \"\";\n//     var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n//     for (var i = 0; i < length; i++) {\n//         text += possible.charAt(Math.floor(Math.random() * possible.length));\n//     }\n//     return text;\n// }"]},"metadata":{},"sourceType":"module"}